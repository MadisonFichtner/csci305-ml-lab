<Fichtner> <Madison>/.l
CSCI 305
Spring 2018
Lab Questions
=======================
1.  After running f [3, 1, 4, 1, 5, 9], I get the output: val it = [4,2,5,2,6,10] : int list.

2.  The function f, as shown by the output above, increments all the integer values in the list
    by 1.

3.  (a) - This line creates an empty list as the base case

4.  (b) - This line, given a list, takes the head and adds 1. The tail is sent through
    f again and the result of the head plus 1 is added to the list

5.  isMember "one" ["1", "2", "3", "4"] returns false, "one" is not found in the list

6.  isMember is tail recursive because the very last thing it does before returning
    is calling itself recursively with it's tail.

7.  The output for list2Set ["it", "was", "the", "best", "of", "times,", "it", "was", "the", "worst", "of", "times"]
    is: { best times, it was the worst of times } using the stringify function.

8.  Tail recursion is a routine call that is performed directly before the end of a function.
    It is a special case of recursion. They are powerful because they can be called without using
    adding anything to the stack, this is called tail call elimination and it allows calls in the tail
    position (end of function or procedure) to be implemented and used as easily as goto statements, which
    is particularly useful in structured programming and functional programming languages. Using tail recursion
    is efficient as a for loop.

9.  The output for union (list2Set ["green", "eggs", "and"]) (list2Set ["ham"])
    is: { and eggs green ham } using the stringify function.

10. The output for intersect (list2Set ["stewed", "tomatoes", "and", "macaroni"]) (list2Set ["macaroni", "and", "cheese"])
    is: { and macaroni } using the stringify function

11. I enjoyed the use of tail recursion. It's kind of a different way of thinking how to
    iterate and solve problems. I am so used to the conventional Java, C, and Python syntax
    of programming that it is interesting to do something completely different

12. I disliked most of the syntax in ML. It is extremely difficult to get a grasp of
    and is completely different from anything else I've ever worked with.

13. I did not enjoy this lab. I'd rather be blunt that try to make something up. I disliked
    the syntax in particular as I previously mentioned it did not make too much sense. The
    function types and function format is difficult to grasp and harder to implement correctly.

14. I spent approximately 6 hours on this lab.

15. I don't think I'll personally use ML again. I see that it could be powerful for developing
    quick functions. I guess that's maybe why it is a functional language...
